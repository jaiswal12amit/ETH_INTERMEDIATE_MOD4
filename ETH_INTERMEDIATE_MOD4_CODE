// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract DegenToken is ERC20, Ownable, ERC20Burnable 
{

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {}

    function mint(address to, uint256 amount) public onlyOwner 
    {
        _mint(to, amount);
    }

    // Burn tokens
    function burn(uint256 amount) public override 
    {
        _burn(msg.sender, amount);
    }

    
    // Reward system
    mapping(address => uint256) public rewards;

    // Event to log rewards
    event Reward(address indexed user, uint256 amount);
    event RewardClaimed(address indexed user, uint256 amount);

    // Add rewards to a user's account
    function reward(address to, uint256 amount) public onlyOwner
    {
        require(to != address(0), "Cannot reward the zero address");
        rewards[to] += amount;
        emit Reward(to, amount);
    }

    // Claim rewards
    function claimReward() public {
        uint256 rewardAmount = rewards[msg.sender];
        require(rewardAmount > 0, "No rewards to claim");

        rewards[msg.sender] = 0;
        _mint(msg.sender, rewardAmount);

        emit RewardClaimed(msg.sender, rewardAmount);
    }

   
}
